name: Secure Docker Publish to Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 0. Checkout
      - name: 🔄 Checkout repo
        uses: actions/checkout@v3
        id: checkout

      - name: 📦 Setup Node.js
        run: npm install
        id: setup-node

      # 1. Secrets Scanning
      - name: 🔐 Run Gitleaks (Secrets Scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git -v --report-format=json --report-path=gitleaks-report.json
        continue-on-error: true
        id: gitleaks

      # 2. Static Code Analysis (SAST)
      - name: 🛡️ Run Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"
          output: semgrep-report.json
          json: true
        continue-on-error: true
        id: semgrep

      # 3. Dependency Security (SCA) - Snyk
      - name: 🧩 Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        id: snyk

      # 4. Set up Docker Buildx
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      # 5. Login to DockerHub
      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        id: docker-login

      # 6. Build Docker Image (without pushing yet)
      - name: 📦 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: mybyelias/log:latest
        continue-on-error: true
        id: docker-build

      # 7. Scan Docker Image (Trivy)
      - name: 🔍 Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "mybyelias/log:latest"
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: json
          output: trivy-report.json
        continue-on-error: true
        id: trivy

      # 8. Push Docker Image
      - name: 📤 Push Docker image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: mybyelias/log:latest
        continue-on-error: true
        id: docker-push

      # 9. Deploy on remote server via SSH
      - name: 🚀 Deploy on remote server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/gns
            ./log.sh
        continue-on-error: true
        id: deploy

      # 10. Prepare Short Reports
      - name: 📝 Prepare short reports
        id: short-reports
        run: |
          # Gitleaks summary
          gitleaks_count=$(jq '.leaks | length' gitleaks-report.json || echo 0)
          gitleaks_top=$(jq -r '[.leaks[]?.description] | .[:3] | join("; ")' gitleaks-report.json || echo "No issues")
          echo "gitleaks_count=$gitleaks_count" >> $GITHUB_OUTPUT
          echo "gitleaks_top=$gitleaks_top" >> $GITHUB_OUTPUT

          # Semgrep summary
          semgrep_count=$(jq '.results | length' semgrep-report.json || echo 0)
          semgrep_top=$(jq -r '[.results[]?.message] | .[:3] | join("; ")' semgrep-report.json || echo "No issues")
          echo "semgrep_count=$semgrep_count" >> $GITHUB_OUTPUT
          echo "semgrep_top=$semgrep_top" >> $GITHUB_OUTPUT

          # Trivy summary
          trivy_high=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json || echo 0)
          trivy_critical=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json || echo 0)
          echo "trivy_high=$trivy_high" >> $GITHUB_OUTPUT
          echo "trivy_critical=$trivy_critical" >> $GITHUB_OUTPUT

      # 11. Send Short CI/CD Report to Jira
      - name: 📤 Send short CI/CD report to Jira
        run: |
          summary="CI/CD Short Report - $(date +'%Y-%m-%d')"
          description="{
            \"type\":\"doc\",
            \"version\":1,
            \"content\":[
              {\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Gitleaks: ${{ steps.short-reports.outputs.gitleaks_count }} issues (top: ${{ steps.short-reports.outputs.gitleaks_top }})\"}]},
              {\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Semgrep: ${{ steps.short-reports.outputs.semgrep_count }} issues (top: ${{ steps.short-reports.outputs.semgrep_top }})\"}]},
              {\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Trivy: High=${{ steps.short-reports.outputs.trivy_high }}, Critical=${{ steps.short-reports.outputs.trivy_critical }}\"}]},
              {\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Docker Build: ${{ steps.docker-build.outcome }}\"}]},
              {\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Docker Push: ${{ steps.docker-push.outcome }}\"}]},
              {\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Deployment: ${{ steps.deploy.outcome }}\"}]}
            ]
          }"

          curl -X POST \
            -H "Authorization: Basic $JIRA_AUTH" \
            -H "Content-Type: application/json" \
            --data "{
              \"fields\": {
                \"project\": { \"key\": \"NJ\" },
                \"summary\": \"$summary\",
                \"description\": $description,
                \"issuetype\": { \"name\": \"Task\" }
              }
            }" \
            https://gnsus.atlassian.net/rest/api/3/issue
        env:
          JIRA_AUTH: ${{ secrets.JIRA_AUTH }}
